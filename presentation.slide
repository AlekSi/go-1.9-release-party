Go 1.9 Release Party
Sydney Go Users' Group
25 Aug 2017

Dave Cheney
@davecheney

* License and Materials

This presentation is licensed under the [[https://creativecommons.org/licenses/by-sa/4.0/][Creative Commons Attribution-ShareAlike 4.0 International]] licence.

The materials for this presentation are available on GitHub:

.link https://github.com/davecheney/go-1.9-release-party

You are encouraged to remix, transform, or build upon the material, providing you distribute your contributions under the same license.

If you have suggestions or corrections to this presentation, please raise [[https://github.com/davecheney/go-1.9-release-party/issues][an issue on the GitHub project]].

* Go 1.9

Go 1.9 is released!

.image img/rocket.jpg _ 350

TODO .link https://t.co/cIEsMPeY0k Go 1.9 Announcement 

Go 1.9 is the 10th release in the Go 1 series. It follows from the previous version, Go 1.8, [[https://blog.golang.org/go1.8][released on the 16th of February, 2016]]

.link http://golang.org/doc/go1.9 Go 1.9 Release Notes

* What's changed?

So, what's happened in the last six months?

- Performance
- Compiler changes
- Tool changes
- Runtime changes
- Changes to the standard library

* Performance

* Performance

As always, the changes are so general and varied that precise statements about performance are difficult to make.

Most programs should run a bit faster, due to speedups in the garbage collector and optimizations in the standard library.

* Garbage Collector

* Miscellaneous performance improvements

* Compiler speed

TODO(dfc) maybe a few % better on amd64.

* Ports

None.

* Tool changes

* go tool trace

* getgo

... disapointed they didn't name it _upgoer_

* Default $GOROOT

* Runtime changes

* Plugins

Not much has changed, still lots to do

* What's coming up in Go 1.9

Before we close, let's quickly touch on some of the things coming up in Go 1.9

_note_: All of these are speculation, nothing is set in stone until code hits the repo.

* Aliases

After being rolled back before the Go 1.8 freeze, aliases are being re-proposed for Go 1.9 in a more limited fashion.

.link https://golang.org/design/18130-type-alias

.play -edit examples/alias.go

* Faster / cheaper runtime.MemStats

The cost of calling `runtime.MemStats` is propotional to the size of the heap; Austin recently timed it at ~1.7ms per Gb.

There is a CL ready to land that reduces it to 20 us per proc (thread servicing a goroutine) which is a much smaller upper bound.

.link https://golang.org/issue/13613

* Improvements to the inliner

Inlining has historically been limited to leaf functions because of the concern of agressive inlining on the call graph.

In support of this Robert Griesemer and Matthew Dempsky have been improving the line number tracking in Go 1.9 to make it flexible enough to lift the restriction on non-leaf functions.

An unnamed intern has been hired to work on the inliner for 1.9.

Josh Bleecher-Snyder has also suggest that the cost model for inlining should be revised to make sure inlining is paying for itself.

.link https://github.com/golang/go/issues/17566 Issue 17566

* A user level poller

Go has used epoll/kqueue/poll/select for _network_sockets_ for years.

Reads/Writes to other file descriptors have traditionally consumed an OS thread during operation

Recently Ian Lance Taylor landed a refactor that broken our the `runtime` polling subsystem and extended to work for the rest of the `os` package.

.link https://go-review.googlesource.com/#/c/36799/ net: refactor poller into new internal/poll package
.link https://go-review.googlesource.com/#/c/36800/ os: use poller for file I/O 

There is no sign of a programmer accessible poller, yet.

* pprof no longer needs the binary 

No more forgetting to invoke pprof without the binary

`go tool pprof trace.pprof`

* pprof lables

Speaking of pprof, pprof now supports labels

* sync.Map

- not a general purpose concurrent map
- link presentation and video by Bryan Mills

* math/bits

As an experiment in addressing the needs of low level crypto and bit twiddling needs of package writers, Go 1.9 includes a new package, `math/bits`.

`math/bits` contains functions to operate on values representing bit shifts, rotates, masks, and counts.

Where implemented by ssa backends, the `math/bits` functions are replaced by a native sequence of instructions. When no specific instruction exists, or is not implemented, the compiler treats the `math/bits` package as normal Go code.

* testing.Helper()

Use it to exclude testing helpers from `t.Errorf()` and `t.Fatalf()` tracebacks.

* Go 1.next

The next release of Go will be ... wait for it ...

Go 1.10

Yup! 

* Go.future

Talk about Go 2

- experience reports
- random proposals don't count, you have to explain what the problem is _before_ you start talking about what you want to change.

* Conclusion

.image img/party-gopher.png

Upgrade to Go 1.9, now!

I know I said this last time, but it's literally the best version of Go, _ever_.

